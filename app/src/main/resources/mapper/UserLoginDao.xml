<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.f33v.app.dao.UserLoginDao">

    <resultMap type="cn.f33v.app.entity.UserLogin" id="UserLoginMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="nickName" column="nick_name" jdbcType="VARCHAR"/>
        <result property="ipAddress" column="ip_address" jdbcType="VARCHAR"/>
        <result property="ipSource" column="ip_source" jdbcType="VARCHAR"/>
        <result property="loginType" column="login_type" jdbcType="VARCHAR"/>
        <result property="loginTime" column="login_time" jdbcType="TIMESTAMP"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="avatar" column="avatar" jdbcType="VARCHAR"/>
        <result property="roleName" column="role_name" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="UserLoginMap">
        select id,
               nick_name,
               ip_address,
               ip_source,
               login_type,
               login_time,
               last_login_time,
               avatar,
               role_name
        from myblog.user_login
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="UserLoginMap">
        select id,
               nick_name,
               ip_address,
               ip_source,
               login_type,
               login_time,
               last_login_time,
               avatar,
               role_name
        from myblog.user_login
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="UserLoginMap">
        select
        id, nick_name, ip_address, ip_source, login_type, login_time, last_login_time, avatar, role_name
        from myblog.user_login
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="nickName != null and nickName != ''">
                and nick_name = #{nickName}
            </if>
            <if test="ipAddress != null and ipAddress != ''">
                and ip_address = #{ipAddress}
            </if>
            <if test="ipSource != null and ipSource != ''">
                and ip_source = #{ipSource}
            </if>
            <if test="loginType != null and loginType != ''">
                and login_type = #{loginType}
            </if>
            <if test="loginTime != null">
                and login_time = #{loginTime}
            </if>
            <if test="lastLoginTime != null">
                and last_login_time = #{lastLoginTime}
            </if>
            <if test="avatar != null and avatar != ''">
                and avatar = #{avatar}
            </if>
            <if test="roleName != null and roleName != ''">
                and role_name = #{roleName}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into myblog.user_login(nick_name, ip_address, ip_source, login_type, login_time, last_login_time, avatar,
                                      role_name)
        values (#{nickName}, #{ipAddress}, #{ipSource}, #{loginType}, #{loginTime}, #{lastLoginTime}, #{avatar},
                #{roleName})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into myblog.user_login(nick_name, ip_address, ip_source, login_type, login_time, last_login_time, avatar,
        role_name)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.nickName}, #{entity.ipAddress}, #{entity.ipSource}, #{entity.loginType}, #{entity.loginTime},
            #{entity.lastLoginTime}, #{entity.avatar}, #{entity.roleName})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into myblog.user_login(nick_name, ip_address, ip_source, login_type, login_time, last_login_time, avatar,
        role_name)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.nickName}, #{entity.ipAddress}, #{entity.ipSource}, #{entity.loginType}, #{entity.loginTime},
            #{entity.lastLoginTime}, #{entity.avatar}, #{entity.roleName})
        </foreach>
        on duplicate key update
        nick_name = values(nick_name) , ip_address = values(ip_address) , ip_source = values(ip_source) , login_type =
        values(login_type) , login_time = values(login_time) , last_login_time = values(last_login_time) , avatar =
        values(avatar) , role_name = values(role_name)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update myblog.user_login
        <set>
            <if test="nickName != null and nickName != ''">
                nick_name = #{nickName},
            </if>
            <if test="ipAddress != null and ipAddress != ''">
                ip_address = #{ipAddress},
            </if>
            <if test="ipSource != null and ipSource != ''">
                ip_source = #{ipSource},
            </if>
            <if test="loginType != null and loginType != ''">
                login_type = #{loginType},
            </if>
            <if test="loginTime != null">
                login_time = #{loginTime},
            </if>
            <if test="lastLoginTime != null">
                last_login_time = #{lastLoginTime},
            </if>
            <if test="avatar != null and avatar != ''">
                avatar = #{avatar},
            </if>
            <if test="roleName != null and roleName != ''">
                role_name = #{roleName},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from myblog.user_login
        where id = #{id}
    </delete>

</mapper>

